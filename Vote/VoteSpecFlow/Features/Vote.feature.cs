// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Vote.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class VoteFeature : object, Xunit.IClassFixture<VoteFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Vote.feature"
#line hidden
        
        public VoteFeature(VoteFeature.FixtureData fixtureData, Vote_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Vote", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
    #line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Nom"});
            table1.AddRow(new string[] {
                        "Brian"});
            table1.AddRow(new string[] {
                        "Noureddine"});
            table1.AddRow(new string[] {
                        "Charles"});
            table1.AddRow(new string[] {
                        "Nil"});
#line 4
        testRunner.Given("un scrutin avec les candidats suivants:", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Un candidat obtient plus de 50% des voix")]
        [Xunit.TraitAttribute("FeatureTitle", "Vote")]
        [Xunit.TraitAttribute("Description", "Un candidat obtient plus de 50% des voix")]
        [Xunit.TraitAttribute("Category", "Majoritaire")]
        public virtual void UnCandidatObtientPlusDe50DesVoix()
        {
            string[] tagsOfScenario = new string[] {
                    "Majoritaire"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Un candidat obtient plus de 50% des voix", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 12
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidat",
                            "Votes"});
                table2.AddRow(new string[] {
                            "Brian",
                            "60"});
                table2.AddRow(new string[] {
                            "Noureddine",
                            "20"});
                table2.AddRow(new string[] {
                            "Charles",
                            "10"});
                table2.AddRow(new string[] {
                            "Nil",
                            "10"});
#line 13
        testRunner.Given("les votes suivants ont été enregistrés:", ((string)(null)), table2, "Given ");
#line hidden
#line 19
        testRunner.When("le scrutin est clôturé", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
        testRunner.Then("Brian est déclaré vainqueur", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidat",
                            "Votes",
                            "Pourcentage"});
                table3.AddRow(new string[] {
                            "Brian",
                            "60",
                            "60"});
                table3.AddRow(new string[] {
                            "Noureddine",
                            "20",
                            "20"});
                table3.AddRow(new string[] {
                            "Charles",
                            "10",
                            "10"});
                table3.AddRow(new string[] {
                            "Nil",
                            "10",
                            "10"});
#line 21
        testRunner.And("le résultat affiche:", ((string)(null)), table3, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Aucun candidat n\'obtient la majorité")]
        [Xunit.TraitAttribute("FeatureTitle", "Vote")]
        [Xunit.TraitAttribute("Description", "Aucun candidat n\'obtient la majorité")]
        [Xunit.TraitAttribute("Category", "PasDeMajorite")]
        public virtual void AucunCandidatNobtientLaMajorite()
        {
            string[] tagsOfScenario = new string[] {
                    "PasDeMajorite"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Aucun candidat n\'obtient la majorité", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 29
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidat",
                            "Votes"});
                table4.AddRow(new string[] {
                            "Brian",
                            "40"});
                table4.AddRow(new string[] {
                            "Noureddine",
                            "30"});
                table4.AddRow(new string[] {
                            "Charles",
                            "20"});
                table4.AddRow(new string[] {
                            "Nil",
                            "10"});
#line 30
        testRunner.Given("les votes suivants ont été enregistrés:", ((string)(null)), table4, "Given ");
#line hidden
#line 36
        testRunner.When("le scrutin est clôturé", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidat",
                            "Votes",
                            "Pourcentage"});
                table5.AddRow(new string[] {
                            "Brian",
                            "40",
                            "40"});
                table5.AddRow(new string[] {
                            "Noureddine",
                            "30",
                            "30"});
#line 37
        testRunner.Then("le résultat affiche:", ((string)(null)), table5, "Then ");
#line hidden
#line 41
        testRunner.And("le statut du résultat est \"PasDeMajorite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Deuxième tour avec les deux meilleurs candidats")]
        [Xunit.TraitAttribute("FeatureTitle", "Vote")]
        [Xunit.TraitAttribute("Description", "Deuxième tour avec les deux meilleurs candidats")]
        [Xunit.TraitAttribute("Category", "SecondTour")]
        public virtual void DeuxiemeTourAvecLesDeuxMeilleursCandidats()
        {
            string[] tagsOfScenario = new string[] {
                    "SecondTour"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deuxième tour avec les deux meilleurs candidats", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 44
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Nom"});
                table6.AddRow(new string[] {
                            "Brian"});
                table6.AddRow(new string[] {
                            "Noureddine"});
#line 45
        testRunner.Given("un scrutin avec les candidats suivants:", ((string)(null)), table6, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidat",
                            "Votes"});
                table7.AddRow(new string[] {
                            "Brian",
                            "45"});
                table7.AddRow(new string[] {
                            "Noureddine",
                            "55"});
#line 49
        testRunner.Given("les votes suivants ont été enregistrés:", ((string)(null)), table7, "Given ");
#line hidden
#line 53
        testRunner.When("le scrutin est clôturé", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
        testRunner.Then("Noureddine est déclaré vainqueur", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidat",
                            "Votes",
                            "Pourcentage"});
                table8.AddRow(new string[] {
                            "Noureddine",
                            "55",
                            "55"});
                table8.AddRow(new string[] {
                            "Brian",
                            "45",
                            "45"});
#line 55
        testRunner.And("le résultat affiche:", ((string)(null)), table8, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Égalité au second tour")]
        [Xunit.TraitAttribute("FeatureTitle", "Vote")]
        [Xunit.TraitAttribute("Description", "Égalité au second tour")]
        [Xunit.TraitAttribute("Category", "Egalite")]
        public virtual void EgaliteAuSecondTour()
        {
            string[] tagsOfScenario = new string[] {
                    "Egalite"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Égalité au second tour", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 61
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Nom"});
                table9.AddRow(new string[] {
                            "Brian"});
                table9.AddRow(new string[] {
                            "Noureddine"});
#line 62
        testRunner.Given("un scrutin avec les candidats suivants:", ((string)(null)), table9, "Given ");
#line hidden
#line 66
        testRunner.And("le scrutin est au deuxième tour", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidat",
                            "Votes"});
                table10.AddRow(new string[] {
                            "Brian",
                            "50"});
                table10.AddRow(new string[] {
                            "Noureddine",
                            "50"});
#line 67
        testRunner.Given("les votes suivants ont été enregistrés:", ((string)(null)), table10, "Given ");
#line hidden
#line 71
        testRunner.When("le scrutin est clôturé", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
        testRunner.Then("le statut du résultat est \"Egalite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Égalité entre le deuxième et le troisième au premier tour")]
        [Xunit.TraitAttribute("FeatureTitle", "Vote")]
        [Xunit.TraitAttribute("Description", "Égalité entre le deuxième et le troisième au premier tour")]
        [Xunit.TraitAttribute("Category", "EgaliteDeuxiemeTroisieme")]
        public virtual void EgaliteEntreLeDeuxiemeEtLeTroisiemeAuPremierTour()
        {
            string[] tagsOfScenario = new string[] {
                    "EgaliteDeuxiemeTroisieme"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Égalité entre le deuxième et le troisième au premier tour", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 75
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Nom"});
                table11.AddRow(new string[] {
                            "Brian"});
                table11.AddRow(new string[] {
                            "Charles"});
                table11.AddRow(new string[] {
                            "Noureddine"});
                table11.AddRow(new string[] {
                            "Nil"});
#line 76
        testRunner.Given("un scrutin avec les candidats suivants:", ((string)(null)), table11, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidat",
                            "Votes"});
                table12.AddRow(new string[] {
                            "Brian",
                            "40"});
                table12.AddRow(new string[] {
                            "Charles",
                            "30"});
                table12.AddRow(new string[] {
                            "Noureddine",
                            "30"});
                table12.AddRow(new string[] {
                            "Nil",
                            "0"});
#line 82
        testRunner.Given("les votes suivants ont été enregistrés:", ((string)(null)), table12, "Given ");
#line hidden
#line 88
        testRunner.When("le scrutin est clôturé", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidat",
                            "Votes",
                            "Pourcentage"});
                table13.AddRow(new string[] {
                            "Brian",
                            "40",
                            "40"});
                table13.AddRow(new string[] {
                            "Charles",
                            "30",
                            "30"});
                table13.AddRow(new string[] {
                            "Noureddine",
                            "30",
                            "30"});
#line 89
        testRunner.Then("le résultat affiche:", ((string)(null)), table13, "Then ");
#line hidden
#line 94
        testRunner.And("le statut du résultat est \"PasDeMajorite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Aucun candidat n’obtient la majorité à cause des votes blancs")]
        [Xunit.TraitAttribute("FeatureTitle", "Vote")]
        [Xunit.TraitAttribute("Description", "Aucun candidat n’obtient la majorité à cause des votes blancs")]
        [Xunit.TraitAttribute("Category", "VoteBlanc")]
        public virtual void AucunCandidatNObtientLaMajoriteACauseDesVotesBlancs()
        {
            string[] tagsOfScenario = new string[] {
                    "VoteBlanc"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Aucun candidat n’obtient la majorité à cause des votes blancs", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 97
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Nom"});
                table14.AddRow(new string[] {
                            "Brian"});
                table14.AddRow(new string[] {
                            "Noureddine"});
#line 98
        testRunner.Given("un scrutin avec les candidats suivants:", ((string)(null)), table14, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidat",
                            "Votes"});
                table15.AddRow(new string[] {
                            "Brian",
                            "50"});
                table15.AddRow(new string[] {
                            "Noureddine",
                            "45"});
                table15.AddRow(new string[] {
                            "Blanc",
                            "5"});
#line 102
        testRunner.Given("les votes suivants ont été enregistrés:", ((string)(null)), table15, "Given ");
#line hidden
#line 107
        testRunner.When("le scrutin est clôturé", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 108
        testRunner.Then("le statut du résultat est \"PasDeMajorite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                VoteFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                VoteFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
